{"version":3,"sources":["Commons/Footer/Footer.js","Commons/Header/Header.js","Commons/storageUtils.js","Views/Checklist/Checklist.js","Views/Notes/Notes.js","Views/Content.js","App.js","serviceWorker.js","index.js"],"names":["Footer","React","useState","className","Header","routes","render","history","AppBar","Tabs","initialSelectedIndex","variant","value","location","pathname","Tab","label","component","Link","to","path","getStorageSection","section","storageObject","storage","localStorage","getItem","JSON","parse","error","setStorageSection","object","setItem","stringify","Freetext","checkLists","setCheckLists","activeCheckList","useRef","useEffect","List","aria-label","ListItem","button","onClick","note","name","content","Button","map","item","index","disableGutters","dense","selected","current","ListItemText","changeActiveList","primary","noteListItem","splice","deleteNote","length","notesList","setNotesList","activeNoteIndex","changeActiveNote","onChange","currentNotes","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","Content","Notes","Checklist","App","fluid","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0d155982.chunk.js","sourcesContent":["import React from 'react'\nimport \"./footer.css\"\n\nfunction Footer() {\n\n    const [value, setValue] = React.useState(2);\n    return (\n        <div className=\"footerBar\">\n        </div>\n\n        \n    )\n}\n\nexport default Footer","import React from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport { Tab, Tabs, AppBar } from '@material-ui/core'\nexport default function Header() {\n    const routes = [\"/checklist\",\"/notes\"]\n    return (\n        <div className=\"topBar\">\n            <Route render={(history) => (\n                <AppBar>\n                    <Tabs  initialSelectedIndex={routes[0]} variant=\"fullWidth\" value={history.location.pathname !== '/' ? history.location.pathname : false}>\n                        <Tab label=\"notes\" value={routes[1]} component={Link} to={routes[1]} ></Tab>\n                        <Tab label=\"checklist\" value={routes[0]} component={Link} to={routes[0]}></Tab>\n                    </Tabs>\n                </AppBar>\n            )}\n                path=\"/\">\n            </Route>\n        </div>\n    )\n}\n","const getStorageSection = (section) =>{\n    let storage = localStorage.getItem(\"scribble\") || \"{}\"\n    let storageObject;\n    try{\n        storageObject = JSON.parse(storage);\n    }catch(error){\n        storageObject = {};\n    }\n    return storageObject[section] || []\n}\n\nconst setStorageSection = (object, section) =>{\n    let storage = localStorage.getItem(\"scribble\") || \"{}\"\n    let storageObject;\n    try{\n        storageObject = JSON.parse(storage);\n    }catch(error){\n        storageObject = {};\n    }\n    storageObject[section] = object;\n    localStorage.setItem(\"scribble\", JSON.stringify(storageObject))\n}\n\nexport {\n    getStorageSection,\n    setStorageSection\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\n\nimport {\n  ProSidebar,\n  SidebarContent,\n  SidebarHeader,\n} from \"react-pro-sidebar\";\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  Button,\n  setRef,\n} from \"@material-ui/core\";\nimport {\n  setStorageSection,\n  getStorageSection,\n} from \"../../Commons/storageUtils\";\nimport \"./checklist.css\";\nexport default function Freetext() {\n  const [checkLists, setCheckLists] = useState([]);\n  const activeCheckList = useRef(0);\n\n  useEffect(() => {\n    let checkLists = getStorageSection(\"checklists\");\n    setCheckLists(checkLists);\n  }, []);\n\n  useEffect(() => {\n    setStorageSection(checkLists, \"checklists\");\n  }, [checkLists]);\n\n  const addNewCheckList = () => {\n    setCheckLists([\n      ...checkLists,\n      {\n        name: \"New List\",\n        content: [],\n      },\n    ]);\n  };\n\n  const changeActiveList = (index) => {\n    activeCheckList.current = index;\n    setCheckLists([...checkLists]);\n  };\n\n  const handleChangeContent = (value) => {\n    let currentNotes = [...checkLists];\n    currentNotes[activeCheckList.current] = {\n      ...currentNotes[activeCheckList.current],\n      content: value,\n    };\n    setCheckLists(currentNotes);\n  };\n\n  const deleteNote = (index) => {\n    let noteListItem = [...checkLists];\n    noteListItem.splice(index, 1);\n    setCheckLists(noteListItem);\n  };\n\n  const changeNoteName = (index, name) => {};\n  return (\n    <div className=\"page-content\">\n      <ProSidebar className=\"sidenav\">\n        <SidebarHeader>\n          <List component=\"nav\" aria-label=\"\" className=\"align-center new-note\">\n            <ListItem\n              button\n              onClick={(note) => {\n                addNewCheckList();\n              }}\n            >\n              <Button className=\"fullwidth\" variant=\"contained\">\n                New List\n              </Button>\n            </ListItem>\n          </List>\n        </SidebarHeader>\n        <SidebarContent>\n          <List component=\"nav\" className=\"secondary mailbox folders entries \">\n            {checkLists.map((item, index) => {\n              return (\n                <ListItem\n                  disableGutters dense={true}\n                  selected={index == activeCheckList.current}\n                >\n                  <ListItemText\n                    onClick={() => {\n                      changeActiveList(index);\n                    }}\n                    primary={item.name}\n                  />\n                  <span\n                    onClick={() => {\n                      deleteNote(index);\n                    }}\n                  >\n                    x\n                  </span>\n                </ListItem>\n              );\n            })}\n          </List>\n        </SidebarContent>\n      </ProSidebar>\n      <div className=\"right-content\">\n        {checkLists && checkLists.length > 0 && (\n            <span>list </span>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\n\nimport {\n  ProSidebar,\n  SidebarContent,\n  SidebarHeader,\n  SidebarFooter,\n  Menu,\n  SubMenu,\n  MenuItem,\n} from \"react-pro-sidebar\";\nimport ReactQuill from \"react-quill\"; // ES6\nimport {\n  List,\n  ListItem,\n  ListItemText,\n  Button,\n  setRef,\n} from \"@material-ui/core\";\nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport {\n  setStorageSection,\n  getStorageSection,\n} from \"../../Commons/storageUtils\";\nimport \"./notes.css\";\nexport default function Freetext() {\n  const [notesList, setNotesList] = useState([]);\n  const activeNoteIndex = useRef(0);\n\n  useEffect(() => {\n    let notesList = getStorageSection(\"notes\");\n    setNotesList(notesList);\n  }, []);\n\n  useEffect(() => {\n    setStorageSection(notesList, \"notes\");\n  }, [notesList]);\n\n  const addNewNote = () => {\n    setNotesList([\n      ...notesList,\n      {\n        name: \"New note\",\n        content: \"\",\n      },\n    ]);\n  };\n\n  const changeActiveNote = (index) => {\n    activeNoteIndex.current = index;\n    setNotesList([...notesList]);\n  };\n\n  const handleChangeContent = (value) => {\n    let currentNotes = [...notesList];\n    currentNotes[activeNoteIndex.current] = {\n      ...currentNotes[activeNoteIndex.current],\n      content: value,\n    };\n    setNotesList(currentNotes);\n  };\n\n  const deleteNote = (index) => {\n    let noteListItem = [...notesList];\n    noteListItem.splice(index, 1);\n    setNotesList(noteListItem);\n  };\n\n  const changeNoteName = (index, name) => {};\n  return (\n    <div className=\"page-content\">\n      <ProSidebar className=\"sidenav\">\n        <SidebarHeader>\n          <List component=\"nav\" aria-label=\"\" className=\"align-center new-note\">\n            <ListItem\n              button\n              onClick={(note) => {\n                addNewNote();\n              }}\n            >\n              <Button className=\"fullwidth\" variant=\"contained\">\n                New note\n              </Button>\n            </ListItem>\n          </List>\n        </SidebarHeader>\n        <SidebarContent>\n          <List component=\"nav\" className=\"secondary mailbox folders entries \">\n            {notesList.map((item, index) => {\n              return (\n                <ListItem\n                  disableGutters dense={true}\n                  selected={index == activeNoteIndex.current}\n                >\n                  <ListItemText\n                    onClick={() => {\n                      changeActiveNote(index);\n                    }}\n                    primary={item.name}\n                  />\n                  <span\n                    onClick={() => {\n                      deleteNote(index);\n                    }}\n                  >\n                    x\n                  </span>\n                </ListItem>\n              );\n            })}\n          </List>\n        </SidebarContent>\n      </ProSidebar>\n      <div className=\"right-content\">\n        {notesList && notesList.length > 0 && (\n          <ReactQuill\n            value={notesList[activeNoteIndex.current]?.content}\n            onChange={handleChangeContent}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { Route, Switch } from 'react-router-dom'\nimport Checklist from './Checklist/Checklist'\nimport Notes from './Notes/Notes'\nimport { Grid, Row, Col } from 'react-flexbox-grid'\nimport './Content.css'\nimport { ProSidebar, SidebarContent, SidebarHeader, SidebarFooter, Menu, SubMenu, MenuItem } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n}));\n\nfunction Content() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState('1');\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n    return (\n            <Switch>\n                <Route path=\"/notes\" component={Notes}></Route>\n                <Route path=\"/checklist\" component={Checklist}></Route>\n            </Switch>\n        \n    )\n    \n}\n\nexport default Content","import React from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid'\nimport Footer from './Commons/Footer/Footer'\nimport Header from './Commons/Header/Header'\nimport Content from './Views/Content'\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Grid fluid>\n        <Row >\n          <Header></Header>\n        </Row>\n        <Row className=\"contentHolder\">\n            <Content></Content>\n        </Row>\n        <Row >\n            <Footer></Footer>\n        </Row>\n        </Grid>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}